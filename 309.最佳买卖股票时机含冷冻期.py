from typing import List

class Solution:
    def maxProfit(self, prices: List[int]) -> int:
        
        # 核心思想
        # 很明显可以看出需要dp来作,但由于这题有两个限制条件，所以要变成一个二维dp
        # dp[i]代表第i天的最大收益
        
        # dp[i][0]，持有1支股票的最大收益
        #   原因：1. 第i-1天的股票没有卖出；
        #         2.第i天买入了1支股票。
        #   收益为：1.第i-1的股票没有卖出，第i天仍持有1支股票（股票不卖出去，就没有赚到钱）：dp[i-1][0]
        #          2.第i天可以买入一支股票减去买股票的成本：dp[i-1][2] - prices[i]
        #           取出这两个情况的最大值，为此时的收益最大值
        #   转移方程： dp[i][0] = max(dp[i-1][0], dp[i-1][2] - prices[i])
        
        # dp[i][1]，持有0支股票，当天将股票卖出，此时不能买入股票
        #   原因：当天将股票卖出后的收益
        #   收益为：第i-1天没有卖出，持有1支股票获得的收益dp[i - 1][0] + 第i天将股票卖出的收益prices[i]
        #   转移方程： dp[i][1] = dp[i - 1][0] + prices[i]
        
        # dp[i][2]，持有0支股票，非当天卖出的
        #   原因：1.可能是第i-1天卖出后，处于冷冻期不能买入；
        #         2.持有0支股票处于非冷冻期，虽然可以买入，但第i天仍然不买入股票
        #   收益为：1.第i天天处于冷冻期，第i-1天将股票卖出，收益为将股票卖出得到的收益：dp[i - 1][1]
        #          2.第i天处于非冷冻期的普通日子，可以买入，但不买入，此时收益为：dp[i - 1][2]
        #               原因（这里有点绕）：若可以买入，但不进行买入的普通日子，则该段日子的开头为冷冻期，因为不买入，所以收益一直为冷冻期时的收益
        #           取出这两个情况的最大值，为此时的收益最大值
        #   转移方程： dp[i][2] = max(dp[i - 1][2], dp[i - 1][1])

        # 初始状态：
        # dp[0][0] = -prices[0], 一开始就买入股票，花费的本金
        # dp[0][1] = 0, 一开始就没有股票，所以不能卖出，收益为0
        # dp[0][2] = 0. 同理，一开始就没有股票，不能卖出，收益为0

        # 最终返回dp[-1]中三种情况的最大值
        
        # 特殊情况
        # 股票为空，返回0

        if not prices: return 0

        dp = [[0] * 3 for _ in range(len(prices))]
        dp[0][0] = -prices[0]
        for i in range(1, len(prices)):
            # 根据转移方程编写代码
            dp[i][0] = max(dp[i-1][0], dp[i-1][2] - prices[i])
            dp[i][1] = dp[i - 1][0] + prices[i]
            dp[i][2] = max(dp[i - 1][2], dp[i - 1][1])
        return max(dp[-1])

